"""
TESTS DE SC√âNARIOS - CHATBOT P√âDAGOGIQUE
Tests automatis√©s bas√©s sur des sc√©narios r√©els d'utilisation

Tests couverts :
- Sc√©narios √©ducatifs par niveau
- Gestion des conversations contextuelles
- Qualit√© des r√©ponses p√©dagogiques
- Adaptation au niveau utilisateur
- Gestion d'erreurs et cas limites
"""

import unittest
import requests
import json
import time
import sys
import os
from typing import Dict, Any, List

# Ajout du r√©pertoire backend au path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))

class TestScenarios(unittest.TestCase):
    """Tests bas√©s sur des sc√©narios r√©els d'utilisation"""
    
    @classmethod
    def setUpClass(cls):
        """Configuration initiale des tests de sc√©narios"""
        cls.base_url = "http://localhost:5000"
        cls.timeout = 15  # Timeout plus long pour les sc√©narios complexes
        
        # Chargement des sc√©narios de test
        cls.scenarios = cls._load_test_scenarios()
        
        # V√©rification du serveur
        cls.server_running = cls._check_server()
        
        print("\nüé≠ Initialisation des tests de sc√©narios...")
        print(f"   Sc√©narios charg√©s: {len(cls.scenarios)}")
        print(f"   Serveur: {'‚úÖ Actif' if cls.server_running else '‚ùå Inactif'}")
    
    @classmethod
    def _load_test_scenarios(cls) -> List[Dict[str, Any]]:
        """Charge les sc√©narios de test depuis le fichier JSON"""
        try:
            with open('data/test_scenarios.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
            return data.get('test_scenarios', [])
        except FileNotFoundError:
            print("‚ö†Ô∏è Fichier test_scenarios.json non trouv√©")
            return cls._get_default_scenarios()
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur chargement sc√©narios: {e}")
            return cls._get_default_scenarios()
    
    @classmethod
    def _check_server(cls):
        """V√©rifie si le serveur Flask est d√©marr√©"""
        try:
            response = requests.get(f"{cls.base_url}/health", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    @classmethod
    def _get_default_scenarios(cls) -> List[Dict[str, Any]]:
        """Sc√©narios par d√©faut si le fichier n'est pas trouv√©"""
        return [
            {
                "id": "basic_greeting",
                "name": "Test de salutation basique",
                "input": "Bonjour",
                "expected_behavior": {
                    "contains": ["bonjour", "aide", "deep learning"],
                    "min_length": 50,
                    "max_length": 200
                }
            },
            {
                "id": "concept_explanation_beginner", 
                "name": "Explication concept niveau d√©butant",
                "input": "Qu'est-ce qu'un r√©seau de neurones ?",
                "user_level": "beginner",
                "expected_behavior": {
                    "contains": ["r√©seau", "neurones", "exemple"],
                    "min_length": 100,
                    "max_length": 400
                }
            }
        ]
    
    def test_basic_greeting_scenario(self):
        """Test du sc√©nario de salutation basique"""
        if not self.server_running:
            self.skipTest("Serveur non d√©marr√©")
        
        scenario = self._get_scenario("basic_greeting")
        if not scenario:
            self.skipTest("Sc√©nario 'basic_greeting' non trouv√©")
        
        print(f"\nüé≠ Test: {scenario['name']}")
        
        response = self._send_chat_message(scenario['input'])
        self.assertIsNotNone(response, "R√©ponse ne doit pas √™tre None")
        
        self._validate_response_behavior(response, scenario['expected_behavior'])
        print("   ‚úÖ Sc√©nario de salutation r√©ussi")
    
    def test_concept_explanation_beginner(self):
        """Test d'explication de concept niveau d√©butant"""
        if not self.server_running:
            self.skipTest("Serveur non d√©marr√©")
        
        scenario = self._get_scenario("concept_explanation_beginner")
        if not scenario:
            self.skipTest("Sc√©nario 'concept_explanation_beginner' non trouv√©")
        
        print(f"\nüé≠ Test: {scenario['name']}")
        
        response = self._send_chat_message(
            scenario['input'],
            level=scenario.get('user_level', 'beginner')
        )
        
        self.assertIsNotNone(response)
        self._validate_response_behavior(response, scenario['expected_behavior'])
        
        # V√©rifications sp√©cifiques niveau d√©butant
        response_lower = response.lower()
        self.assertTrue(
            any(word in response_lower for word in ['simple', 'exemple', 'comme']),
            "R√©ponse d√©butant doit contenir des √©l√©ments de simplification"
        )
        
        print("   ‚úÖ Explication niveau d√©butant r√©ussie")
    
    def test_concept_explanation_advanced(self):
        """Test d'explication de concept niveau avanc√©"""
        if not self.server_running:
            self.skipTest("Serveur non d√©marr√©")
        
        scenario = self._get_scenario("concept_explanation_advanced")
        if not scenario:
            # Cr√©ation d'un sc√©nario avanc√© par d√©faut
            scenario = {
                "input": "Explique-moi la r√©tropropagation avec les d√©tails math√©matiques",
                "user_level": "advanced",
                "expected_behavior": {
                    "contains": ["r√©tropropagation", "gradient", "math√©matique"],
                    "min_length": 200,
                    "max_length": 600
                }
            }
        
        print(f"\nüé≠ Test: Explication concept niveau avanc√©")
        
        response = self._send_chat_message(
            scenario['input'],
            level=scenario.get('user_level', 'advanced')
        )
        
        self.assertIsNotNone(response)
        self._validate_response_behavior(response, scenario['expected_behavior'])
        
        # V√©rifications sp√©cifiques niveau avanc√©
        response_lower = response.lower()
        advanced_indicators = ['technique', 'algorithme', 'formule', 'calcul', 'math√©matique']
        self.assertTrue(
            any(word in response_lower for word in advanced_indicators),
            "R√©ponse avanc√©e doit contenir des termes techniques"
        )
        
        print("   ‚úÖ Explication niveau avanc√© r√©ussie")
    
    def test_comparison_scenario(self):
        """Test de sc√©nario de comparaison"""
        if not self.server_running:
            self.skipTest("Serveur non d√©marr√©")
        
        scenario = self._get_scenario("comparison_cnn_rnn")
        if not scenario:
            scenario = {
                "input": "Quelle est la diff√©rence entre CNN et RNN ?",
                "user_level": "intermediate",
                "expected_behavior": {
                    "contains": ["CNN", "RNN", "diff√©rence"],
                    "min_length": 150,
                    "max_length": 500
                }
            }
        
        print(f"\nüé≠ Test: Comparaison CNN vs RNN")
        
        response = self._send_chat_message(
            scenario['input'],
            level=scenario.get('user_level', 'intermediate')
        )
        
        self.assertIsNotNone(response)
        self._validate_response_behavior(response, scenario['expected_behavior'])
        
        # V√©rifications sp√©cifiques comparaison
        response_upper = response.upper()
        self.assertIn("CNN", response_upper, "Doit mentionner CNN")
        self.assertIn("RNN", response_upper, "Doit mentionner RNN")
        
        comparison_words = ['diff√©rence', 'contrairement', 'tandis que', 'versus', 'vs']
        self.assertTrue(
            any(word in response.lower() for word in comparison_words),
            "Doit contenir des mots de comparaison"
        )
        
        print("   ‚úÖ Sc√©nario de comparaison r√©ussi")
    
    def test_example_request_scenario(self):
        """Test de demande d'exemple concret"""
        if not self.server_running:
            self.skipTest("Serveur non d√©marr√©")
        
        print(f"\nüé≠ Test: Demande d'exemple concret")
        
        response = self._send_chat_message(
            "Donne-moi un exemple concret d'utilisation de CNN",
            level="intermediate"
        )
        
        self.assertIsNotNone(response)
        
        # V√©rifications sp√©cifiques aux exemples
        response_lower = response.lower()
        example_indicators = ['exemple', 'par exemple', 'comme', 'application', 'utilisation']
        self.assertTrue(
            any(word in response_lower for word in example_indicators),
            "Doit contenir des indicateurs d'exemple"
        )
        
        practical_examples = ['image', 'photo', 'reconnaissance', 'd√©tection', 'classification']
        self.assertTrue(
            any(word in response_lower for word in practical_examples),
            "Doit donner des exemples pratiques"
        )
        
        print("   ‚úÖ Exemple concret fourni")
    
    def test_out_of_scope_scenario(self):
        """Test de gestion des questions hors sujet"""
        if not self.server_running:
            self.skipTest("Serveur non d√©marr√©")
        
        print(f"\nüé≠ Test: Question hors sujet")
        
        response = self._send_chat_message(
            "Quelle est la recette de la pizza margherita ?",
            level="beginner"
        )
        
        self.assertIsNotNone(response)
        
        response_lower = response.lower()
        
        # Doit poliment rediriger
        polite_indicators = ['d√©sol√©', 'malheureusement', 'pas', 'plut√¥t', 'aide']
        self.assertTrue(
            any(word in response_lower for word in polite_indicators),
            "Doit poliment indiquer qu'il ne peut pas r√©pondre"
        )
        
        # Doit rester dans le domaine
        domain_indicators = ['deep learning', 'intelligence artificielle', 'informatique', 'r√©seaux']
        self.assertTrue(
            any(phrase in response_lower for phrase in domain_indicators),
            "Doit rediriger vers le domaine appropri√©"
        )
        
        print("   ‚úÖ Redirection hors sujet r√©ussie")
    
    def test_ambiguous_question_scenario(self):
        """Test de gestion des questions ambigu√´s"""
        if not self.server_running:
            self.skipTest("Serveur non d√©marr√©")
        
        print(f"\nüé≠ Test: Question ambigu√´")
        
        response = self._send_chat_message(
            "Comment √ßa marche ?",
            level="intermediate"
        )
        
        self.assertIsNotNone(response)
        
        response_lower = response.lower()
        
        # Doit demander des clarifications
        clarification_indicators = ['pr√©ciser', 'quel', 'quoi', 'sp√©cifique', 'clarifier']
        self.assertTrue(
            any(word in response_lower for word in clarification_indicators),
            "Doit demander des clarifications"
        )
        
        print("   ‚úÖ Gestion question ambigu√´ r√©ussie")
    
    def test_level_adaptation_consistency(self):
        """Test de coh√©rence de l'adaptation au niveau"""
        if not self.server_running:
            self.skipTest("Serveur non d√©marr√©")
        
        print(f"\nüé≠ Test: Coh√©rence adaptation niveaux")
        
        question = "Qu'est-ce que la descente de gradient ?"
        levels = ["beginner", "intermediate", "advanced"]
        responses = {}
        
        for level in levels:
            responses[level] = self._send_chat_message(question, level=level)
            time.sleep(0.5)  # √âviter le rate limiting
        
        # V√©rifications de coh√©rence
        for level in levels:
            self.assertIsNotNone(responses[level], f"R√©ponse {level} ne doit pas √™tre None")
        
        # R√©ponse d√©butant doit √™tre plus simple (moins de termes techniques)
        beginner_technical_words = self._count_technical_words(responses["beginner"])
        advanced_technical_words = self._count_technical_words(responses["advanced"])
        
        self.assertLessEqual(
            beginner_technical_words, 
            advanced_technical_words,
            "R√©ponse d√©butant ne doit pas avoir plus de termes techniques que avanc√©"
        )
        
        print(f"   Termes techniques - D√©butant: {beginner_technical_words}, Avanc√©: {advanced_technical_words}")
        print("   ‚úÖ Adaptation coh√©rente entre niveaux")
    
    def test_response_time_performance(self):
        """Test des performances de temps de r√©ponse"""
        if not self.server_running:
            self.skipTest("Serveur non d√©marr√©")
        
        print(f"\nüé≠ Test: Performance temps de r√©ponse")
        
        test_messages = [
            "Qu'est-ce que le Deep Learning ?",
            "Explique-moi les CNN",
            "Diff√©rence entre apprentissage supervis√© et non supervis√©"
        ]
        
        response_times = []
        
        for message in test_messages:
            start_time = time.time()
            response = self._send_chat_message(message)
            end_time = time.time()
            
            response_time = (end_time - start_time) * 1000  # en ms
            response_times.append(response_time)
            
            self.assertIsNotNone(response)
            self.assertLess(response_time, 15000, f"R√©ponse doit arriver en moins de 15s")
            
            time.sleep(0.5)  # √âviter le rate limiting
        
        avg_response_time = sum(response_times) / len(response_times)
        print(f"   Temps moyen: {avg_response_time:.0f}ms")
        print(f"   Temps min: {min(response_times):.0f}ms")
        print(f"   Temps max: {max(response_times):.0f}ms")
        
        self.assertLess(avg_response_time, 10000, "Temps moyen doit √™tre < 10s")
        print("   ‚úÖ Performance acceptable")
    
    def test_educational_quality(self):
        """Test de la qualit√© √©ducative des r√©ponses"""
        if not self.server_running:
            self.skipTest("Serveur non d√©marr√©")
        
        print(f"\nüé≠ Test: Qualit√© √©ducative")
        
        response = self._send_chat_message(
            "Explique-moi pourquoi on utilise des fonctions d'activation",
            level="intermediate"
        )
        
        self.assertIsNotNone(response)
        
        # Crit√®res de qualit√© √©ducative
        quality_score = 0
        response_lower = response.lower()
        
        # 1. Structure (num√©rotation, listes, sections)
        if any(marker in response for marker in ['1.', '2.', '-', '‚Ä¢']):
            quality_score += 1
        
        # 2. Exemples concrets
        if any(word in response_lower for word in ['exemple', 'par exemple', 'comme']):
            quality_score += 1
        
        # 3. Explications claires
        if any(word in response_lower for word in ['parce que', 'car', 'permet', 'gr√¢ce']):
            quality_score += 1
        
        # 4. Vocabulaire adapt√©
        if 100 <= len(response) <= 500:  # Longueur appropri√©e
            quality_score += 1
        
        # 5. Liens avec d'autres concepts
        if any(phrase in response_lower for phrase in ['li√© √†', 'connexion', 'relation', 'influence']):
            quality_score += 1
        
        print(f"   Score qualit√© √©ducative: {quality_score}/5")
        self.assertGreaterEqual(quality_score, 3, "Qualit√© √©ducative doit √™tre >= 3/5")
        print("   ‚úÖ Qualit√© √©ducative acceptable")
    
    # M√©thodes utilitaires
    
    def _get_scenario(self, scenario_id: str) -> Dict[str, Any]:
        """R√©cup√®re un sc√©nario par son ID"""
        for scenario in self.scenarios:
            if scenario.get('id') == scenario_id:
                return scenario
        return None
    
    def _send_chat_message(self, message: str, level: str = "intermediate") -> str:
        """Envoie un message au chatbot et retourne la r√©ponse"""
        try:
            response = requests.post(
                f"{self.base_url}/api/chat",
                json={
                    "message": message,
                    "level": level,
                    "history": []
                },
                timeout=self.timeout
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    return data.get('response', '')
            
            return None
            
        except Exception as e:
            print(f"   ‚ùå Erreur envoi message: {e}")
            return None
    
    def _validate_response_behavior(self, response: str, expected: Dict[str, Any]):
        """Valide le comportement de la r√©ponse selon les crit√®res attendus"""
        if not response:
            self.fail("R√©ponse vide")
        
        response_lower = response.lower()
        
        # V√©rification des mots-cl√©s requis
        if 'contains' in expected:
            for keyword in expected['contains']:
                self.assertIn(
                    keyword.lower(), 
                    response_lower,
                    f"R√©ponse doit contenir '{keyword}'"
                )
        
        # V√©rification de la longueur
        if 'min_length' in expected:
            self.assertGreaterEqual(
                len(response),
                expected['min_length'],
                f"R√©ponse trop courte (min: {expected['min_length']})"
            )
        
        if 'max_length' in expected:
            self.assertLessEqual(
                len(response),
                expected['max_length'],
                f"R√©ponse trop longue (max: {expected['max_length']})"
            )
    
    def _count_technical_words(self, text: str) -> int:
        """Compte le nombre de mots techniques dans un texte"""
        if not text:
            return 0
        
        technical_words = [
            'algorithme', 'gradient', 'd√©riv√©e', 'matrice', 'vecteur',
            'fonction', 'optimisation', 'hyperparam√®tre', 'epoch',
            'batch', 'tensor', 'backpropagation', 'convolution'
        ]
        
        text_lower = text.lower()
        return sum(1 for word in technical_words if word in text_lower)


class TestConversationalContext(unittest.TestCase):
    """Tests de contexte conversationnel"""
    
    def setUp(self):
        self.base_url = "http://localhost:5000"
        self.timeout = 10
        self.server_running = self._check_server()
    
    def _check_server(self):
        try:
            response = requests.get(f"{self.base_url}/health", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def test_conversation_continuity(self):
        """Test de continuit√© conversationnelle"""
        if not self.server_running:
            self.skipTest("Serveur non d√©marr√©")
        
        print(f"\nüé≠ Test: Continuit√© conversationnelle")
        
        # Premier √©change
        response1 = self._send_chat_message("Qu'est-ce qu'un CNN ?")
        self.assertIsNotNone(response1)
        
        # Deuxi√®me √©change avec contexte
        history = [
            {"type": "user", "content": "Qu'est-ce qu'un CNN ?"},
            {"type": "assistant", "content": response1}
        ]
        
        response2 = self._send_chat_message("Comment √ßa marche exactement ?", history=history)
        self.assertIsNotNone(response2)
        
        # La deuxi√®me r√©ponse doit faire r√©f√©rence au contexte
        response2_lower = response2.lower()
        context_indicators = ['cnn', 'convolution', 'comme mentionn√©', 'comme dit']
        
        self.assertTrue(
            any(indicator in response2_lower for indicator in context_indicators),
            "Deuxi√®me r√©ponse doit faire r√©f√©rence au contexte"
        )
        
        print("   ‚úÖ Continuit√© conversationnelle maintenue")
    
    def _send_chat_message(self, message: str, level: str = "intermediate", history: List = None) -> str:
        """Envoie un message avec contexte optionnel"""
        try:
            response = requests.post(
                f"{self.base_url}/api/chat",
                json={
                    "message": message,
                    "level": level,
                    "history": history or []
                },
                timeout=self.timeout
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    return data.get('response', '')
            
            return None
            
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
            return None


def run_scenario_tests():
    """Fonction principale pour ex√©cuter les tests de sc√©narios"""
    print("üé≠ TESTS DE SC√âNARIOS - CHATBOT P√âDAGOGIQUE")
    print("=" * 60)
    
    # Configuration du test runner
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # Ajout des classes de test
    test_classes = [TestScenarios, TestConversationalContext]
    
    for test_class in test_classes:
        tests = loader.loadTestsFromTestCase(test_class)
        suite.addTests(tests)
    
    # Ex√©cution des tests
    runner = unittest.TextTestRunner(verbosity=2, buffer=True)
    result = runner.run(suite)
    
    # Analyse des r√©sultats
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS DE SC√âNARIOS")
    print(f"Tests ex√©cut√©s: {result.testsRun}")
    print(f"Succ√®s: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"√âchecs: {len(result.failures)}")
    print(f"Erreurs: {len(result.errors)}")
    
    if result.failures:
        print("\n‚ùå √âCHECS D√âTAILL√âS:")
        for test, traceback in result.failures:
            error_lines = traceback.split('\n')
            error_msg = next((line for line in error_lines if 'AssertionError:' in line), 'Erreur non sp√©cifi√©e')
            print(f"   {test}: {error_msg.replace('AssertionError: ', '')}")
    
    if result.errors:
        print("\nüö® ERREURS D√âTAILL√âES:")
        for test, traceback in result.errors:
            error_lines = traceback.split('\n')
            error_msg = error_lines[-2] if len(error_lines) > 1 else traceback
            print(f"   {test}: {error_msg}")
    
    # Calcul du score et recommandations
    success_rate = (result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100
    
    print(f"\nüìà SCORE GLOBAL: {success_rate:.1f}%")
    
    if success_rate >= 90:
        print("üèÜ EXCELLENT ! Votre chatbot fonctionne parfaitement.")
    elif success_rate >= 75:
        print("‚úÖ TR√àS BIEN ! Quelques am√©liorations mineures possibles.")
    elif success_rate >= 60:
        print("‚ö†Ô∏è CORRECT - Des am√©liorations sont n√©cessaires.")
    else:
        print("‚ùå ATTENTION - Probl√®mes importants √† r√©soudre.")
    
    print("\nüí° RECOMMANDATIONS:")
    if not TestScenarios._check_server():
        print("   - D√©marrez le serveur: python backend/app.py")
    
    if success_rate < 75:
        print("   - V√©rifiez la configuration de votre cl√© API Mistral")
        print("   - Compl√©tez votre base de connaissances")
        print("   - Testez manuellement les sc√©narios qui √©chouent")
    
    return result.wasSuccessful()


if __name__ == "__main__":
    success = run_scenario_tests()
    sys.exit(0 if success else 1)